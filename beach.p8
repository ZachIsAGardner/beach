pico-8 cartridge // http://www.pico-8.com
version 21
__lua__
-- lifecycle

actors = {}

logs = {}
log_count = 0
d_draw = {x=0,y=0,frame=15}

f_en_atk=0
f_col=1

c_black=0
c_dark_blue=1
c_dark_purple=2
c_dark_green=3
c_brown=4
c_dark_gray=5
c_light_gray=6
c_white=7
c_red=8
c_orange=9
c_yellow=10
c_green=11
c_blue=12
c_indigo=13
c_pink=14
c_peach=15

--init
function _init()
	-- barrels
	replace_with_actor(38,33)

	pl = define_player()
	create_actor(pl)

	music(0)
end

--update
function _update()
	control_player()

    foreach(actors, update_actor)

	camera(
		get_room().x,
		get_room().y
	)
end

--draw
function _draw()
	-- clear screen
	cls(1)
	
	-- draw map
	map()

	circfill(pl.x*8,pl.y*8,8,c_red)

	-- draw actors
	foreach(actors,draw_actor)
	pal()

	print(pl.health, get_room().x + 2, get_room().y + 2, c_white)

	-- debug
    draw_log()
	-- draw_actor(d_draw)
	d_draw = { x=-10,y=-10,frame=15 }
end


-->8
-- implementations

function control_player()
	if (btn(0)) pl.vx -= pl.acc
	if (btn(1)) pl.vx += pl.acc
	if (btn(2)) pl.vy -= pl.acc
	if (btn(3)) pl.vy += pl.acc
	
	if (btn(0) or btn (1) 
	or btn(2) or btn(3)) then
		pl.frame = 2
	else
		pl.frame = 1
	end
end

function update_actor(a) 
	move_actor(a)

	local hit_atk = is_solid_area(a.x, a.y, a.w, a.h, f_en_atk)

	if (hit_atk.hit and not actor_is_invincible(a)) then
		a.health -= 1
		a.invi_timestamp = time()

		log('ow')
	end

	if (a.health <= 0) then
		a.health = a.max_health
		a.x = a.start_x
		a.y = a.start_y
	end
end

function draw_actor(a)
	pal()

	if actor_is_invincible(a) then
		for i=0,15 do
			pal(i,c_white)
		end
	end

	local sx = (a.x * 8) - 4
	local sy = (a.y * 8) - 4
	spr(a.frame, sx, sy)
end

-->8
-- definitions

function define_actor()
	return {
		x = 0, -- position x
		y = 0, -- position y
		frame = 0, -- frame of animation

		w = 0.5, -- half width
		h = 0.5, -- half height

		vx = 0, -- velocity x
		vy = 0, -- velocity y
		max_v = 0.055, -- max velocity
		acc = 0.15, -- movement acceleration
		friction = 0.25, -- friction

		flags = {},

		start_x = 0,
		start_y = 0,

		health = 1,
		max_health = 1,
		invi_length = 0.125,
		invi_timestamp = -10
	}
end

function define_player()
	local a = define_actor()

	a.x = 9
	a.y = 4
	a.frame = 0

    a.w = 0.3
    a.h = 0.4

    a.vx = 0
    a.vy = 0
    a.max_v = 0.1
    a.acc = 0.075
    a.friction = 0.25

	a.health = 6
	a.max_health = 6

	a.invi_length = 0.75

	return a
end

-->8
-- collision

function move_actor(a)
	local skin = 0.02

	if (abs(a.vx) > 0) then
		local left = sgn(a.vx) == -1

		local h_hit = is_solid_area_h(a.x + a.vx, a.y, a.w, a.h, left, skin, f_col)
		if (h_hit.hit) then
			-- snap to wall
			a.x = (h_hit.rx + ((a.w + 0.5) * (sgn(a.vx) * -1)))
			if (left) then
				a.x = a.x + skin
			else
				a.x = a.x - skin
			end
			a.vx=0
		else
			a.x += a.vx
		end
	end

	if (abs(a.vy) > 0) then
		local top = sgn(a.vy) == -1

		local v_hit = is_solid_area_v(a.x, a.y + a.vy, a.w, a.h, top, skin, f_col)

		if (v_hit.hit) then
			-- snap to wall
			a.y = (v_hit.ry + ((a.h + 0.5) * (sgn(a.vy) * -1)))
			if (top) then
				a.y = a.y + skin
			else
				a.y = a.y - skin
			end
			a.vy=0
		else
			a.y += a.vy
		end
    end

    a.vx *= (1-a.friction)
    a.vy *= (1-a.friction)

    if (a.vx > a.max_v) a.vx = a.max_v
    if (a.vx < a.max_v * -1) a.vx = a.max_v * -1
    if (a.vy > a.max_v) a.vy = a.max_v
    if (a.vy < a.max_v * -1) a.vy = a.max_v * -1
end

function is_solid_area_h(x,y,w,h,left,skin,flag)
	if (left) then
		local top_left = is_solid(x-w-skin,y-h,flag) 
		if (top_left.hit) return top_left

		local bottom_left = is_solid(x-w-skin,y+h,flag) 
		if (bottom_left.hit) return bottom_left
	else
		local top_right = is_solid(x+w+skin,y-h,flag) 
		if (top_right.hit) return top_right

		local bottom_right = is_solid(x+w+skin,y+h,flag) 
		if (bottom_right.hit) return bottom_right
	end

	return { hit=false }
end

function is_solid_area_v(x,y,w,h,top,skin,flag)
	if (top) then
		local top_left = is_solid(x-w,y-h-skin,flag) 
		if (top_left.hit) return top_left

		local top_right = is_solid(x+w,y-h-skin,flag) 
		if (top_right.hit) return top_right
	else
		local bottom_left = is_solid(x-w,y+h+skin,flag) 
		if (bottom_left.hit) return bottom_left

		local bottom_right = is_solid(x+w,y+h+skin,flag) 
		if (bottom_right.hit) return bottom_right
	end

	return { hit=false }
end

function is_solid_area(x,y,w,h,flag)
	local top_left = is_solid(x-w,y-h,flag) 
	if (top_left.hit) return top_left
		
	local top_right = is_solid(x+w,y-h,flag) 
	if (top_right.hit) return top_right

	local bottom_left = is_solid(x-w,y+h,flag) 
	if (bottom_left.hit) return bottom_left

	local bottom_right = is_solid(x+w,y+h,flag) 
	if (bottom_right.hit) return bottom_right

	return { hit=false }
end

function is_solid(x,y,flag)
	local rx=ceil(x)-.5	
	local ry=ceil(y)-.5	

	-- check map
    if fget(mget(x, y), flag) then
		-- d_draw = {x=rx,y=ry,frame=15}
		return { hit=true,rx=rx,ry=ry,x=x,y=y }
	end

	-- check collidible actors
	for a in all(actors) do
		if (pl != a and a.flags[flag]) then
			if (
				x < a.x + a.w 
				and x > a.x - a.w
				and y < a.y + a.h
				and y > a.y - a.h
			) then
				return {hit=true,rx=rx,ry=ry,x=x,y,y}
			end
		end
	end

	-- no hits
	return { hit=false }
end

-->8
-- other

function create_actor(a)
	a.start_x = a.x
	a.start_y = a.y

	for i=0,7 do
		a.flags[i] = fget(a.frame, i)
	end	
	add(actors, a)
end

function actor_is_invincible(a)
	if (not a.invi_timestamp) return false

	return (time() - a.invi_timestamp) <= a.invi_length
end

function replace_with_actor(t, r) 
    for y=0,256 do for x=0,256 do
        if (mget(x,y) == t) then
			mset(x,y,r)

			local a = define_actor()
			a.x = x+(4/8)
			a.y = y+(4/8)
			a.frame = t
			
			create_actor(a)
		end
    end
end end

function draw_text(m)
	r = get_room()
	o = 4
	
	for i=0,14 do
		spr(9,r.x+(i*8)+o,r.y+o)	
	end
	
	print(
		m,
		r.x+1+o,
		r.y+1+o
	)
end

function draw_sign()
	if (mget(pl.x,pl.y)==8) then
		draw_text("hi!")
	end
end

-->8
-- utility

function log(m)
	log_count += 1
	add(logs, { m=m,c=log_count })
end

function draw_log()
	pal()
	
	r = get_room()
	o = {x=2,y=36}

	local j = 0
	local i = #logs
	while i > 0 and j < 10 do
		print(logs[i].c .. ": " .. logs[i].m, r.x + o.x, r.y + (j * 8) + o.y, c_white)
		i-=1
		j+=1
	end
end

function distance(o1, o2)
	return {
		x = o1.x - o2.x,
		y = o1.y - o2.y
	}
end

function get_room()
	return {
		x=flr(pl.x/16)*128,
		y=flr(pl.y/16)*128
	}
end
__gfx__
0000000000000000000000000000000000000000000000000000000000000000ffffffff11111111000000000000000000000000000000000000000000000000
0000000000111110001111100011111000727770000000000000000000000000ffffffff11111111000000000000000000000000000000000000000000000000
0070070001727770017277700172777000727170000000000000000000000000f444444211111111000000000000000000000000000000000000000000000000
0007700011727170117271701172717001277770000000000000000000000000f411141411111111000000000000000000000000000000000000000000088000
0007700000277770002777700027777011777770000000000000000000000000f444444411111111000000000000000000000000000000000000000000088000
00700700000ddd00010ddd01010ddd01001ddd10000000000000000000000000f411211411111111000000000000000000000000000000000000000000000000
00000000001ddd100001dd00000dd100000ddd00000000000000000000000000f224444411111111000000000000000000000000000000000000000000000000
0000000000010100000001000001000000010100000000000000000000000000ffff2fff11111111000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000008888000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000087887000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000088888800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000002270000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000007770000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000002770000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
fffffffffffffffff4ffffffccccccccccccccccf4ffffff00555500000000000000000000000000000000000000000000000000000000000000000000000000
ffffffffffffffff4f4fffffcccccccccccccccc4f4fffff05555550000000000000000000000000000000000000000000000000000000000000000000000000
fffffffffffffffffff6666fccccccccccccccccffffffff01555510000880000000000000000000000000000000000000000000000000000000000000000000
fffffffffffffffff666666dccccccccccccddccffffffff04111140008998000000000000000000000000000000000000000000000000000000000000000000
fffffffffffffffff6666666cccccccccc7ddd7cfffff4ff01444410008998000000000000000000000000000000000000000000000000000000000000000000
77777777ffffffffdd666666ccccccccccc777ccffff4f4f04111140000880000000000000000000000000000000000000000000000000000000000000000000
ccccccccffffffffdddd6666ccccccccccccccccffffffff01444410000000000000000000000000000000000000000000000000000000000000000000000000
ccccccccffffffff44444444ccccccccccccccccffffffff00111100000000000000000000000000000000000000000000000000000000000000000000000000
44444444222222224444444400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
44444444222222224444444400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
44444444222222224444444400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
44444444222222224444444400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
44444444222222224444444400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
44444444222222224444444400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
44444444222222227777777700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4444444422222222cccccccc00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__gff__
0000000000000000000000000000000000000000000000000000000000000000000002020200020100000000000000000202020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
3131313131313131313131313131313131313131313131000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3130303030303030303030303030303030303030303030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3121212121212121212121212121212121212121212121000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3121212127212126212121312121212121212121212121000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3121212521212121212121212121212121212121212121000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3121212121212121212121213131313131313121212121210000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3121212121222121252121313131313131313121212221200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3131312121212121212120313131313131313121212121000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3131312020202020202023313131313132323221212121000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3030302323232323232323303030313123232321212121000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2121212323232323242323202020313123232121212121000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2020202323232323232323232323313123232021212121000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2323232323232323232323232323313123232321212121000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2323232323242323232323232323313123232321212121000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2323232323232323232323232323313123232321212121000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2323232323232323232323232323313123232320202020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
0110000018373000003c6133940330655000003c6130000018373000003c6133940330655000003c6130000018373000003c6133940330655000003c6130000018373000003c6133940330655000003c61300000
001000000c02000000100500c0000c0500000010050000000c02000000100500c0000c05000000100500000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000130200000000000000001305000000000000000013020000000000000000130500000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000300003062500600306550060000600006000060000600006000060000600006000060000600006000060000600000000060000600006000060000600006000060000600006000060000600006000060000600
001000001865000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
01100000000000000018560000001c560000001f56000000000000000000000000000000000000000000000000000000002456000000285600000024560000000000000000000000000000000000000000000000
__music__
01 01020500
02 01020500

